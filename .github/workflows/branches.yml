on:
  pull_request:
    branches:
      - production

jobs:
  edit-pr-title:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Edit PR title
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_PREFIX: "[P]"
        if: ${{ !contains(github.event.pull_request.title, env.PR_PREFIX) }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          NEW_TITLE="${PR_PREFIX} ${{ github.event.pull_request.title }}"
          curl -X PATCH \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER \
            -d "{\"title\":\"$NEW_TITLE\"}"

  create-staging-pr:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.pull_request.title, '<skip>') }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PR_PREFIX: "[S]"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create and merge new branch
        id: create_pr
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

          git checkout staging
          git pull origin staging --rebase
          git commit --allow-empty -m "[BOT]: Resolve merge conflicts!"

          git checkout -b "staging-${{ github.head_ref }}" || git checkout "staging-${{ github.head_ref }}"
          git push origin "staging-${{ github.head_ref }}"|| true

          echo AUTOMATED_PR_TITLE="${{ github.event.pull_request.title }}" | sed "s/\[P\] //g" >> $GITHUB_ENV
          echo ${{env.AUTOMATED_PR_TITLE}}

          git merge "origin/${{ github.head_ref }}" || echo "MERGE_FAILED=true" >> $GITHUB_OUTPUT

          git push origin "staging-${{ github.head_ref }}" --force || true

      - name: Check for existing pull request
        id: check_pr
        run: |
          AUTOMATED_PR_TITLE="${{ github.event.pull_request.title }}" | sed "s/\[P\] /\[S\] /g"
          echo "asdasda"
          echo $AUTOMATED_PR_TITLE 
          pr_id=$(gh pr list --search "$AUTOMATED_PR_TITLE in:title" --json number --jq '.[0].number')
          echo "PR ID XOXOXO"
          echo $pr_id
          if [ -n "$pr_id" ]; then
            echo "pr_found=true" >> $GITHUB_OUTPUT
          else
            echo "pr_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Create pull request
        if: ${{steps.check_pr.outputs.pr_found == 'false'}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_TITLE="${{ env.PR_PREFIX }} ${{env.AUTOMATED_PR_TITLE}}"
          PR_BODY="${{ github.event.pull_request.body }}"

          # Create pull request
          PR_RESPONSE=$(curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d "{
              \"title\": \"$PR_TITLE\",
              \"body\": \"$PR_BODY\",
              \"head\": \"staging-${{ github.head_ref }}\",
              \"base\": \"staging\"
            }")

          # Extract PR number from the response
          PR_NUMBER=$(echo "$PR_RESPONSE" | jq -r .number)

          # Prepare labels
          LABELS='["automated"]'
          if [[ "${{ steps.create_pr.outputs.MERGE_FAILED }}" == "true" ]]; then
            LABELS='["automated", "merge-conflict"]'
          fi

          # Add labels to the pull request
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/labels \
            -d "{\"labels\": $LABELS}"

      - name: Update existing PR labels
        if: ${{steps.check_pr.outputs.pr_found == 'true'}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "PR found: " 
          echo ${{steps.check_pr.outputs.pr_found}}
          # Find the existing PR number
          AUTOMATED_PR_TITLE="${{ github.event.pull_request.title }}" | sed "s/\[P\] /\[S\]/g"
          PR_NUMBER=$(gh pr list --search "${{env.AUTOMATED_PR_TITLE}} in:title" --json number --jq '.[0].number')

          # Prepare labels
          LABELS='["automated"]'
          if [[ "${{ steps.create_pr.outputs.MERGE_FAILED }}" == "true" ]]; then
            LABELS='["automated", "merge-conflict"]'
          fi

          # Update labels of the existing pull request
          curl -X PUT \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/labels \
            -d "{\"labels\": $LABELS}"

          echo "Updated labels for existing pull request #$PR_NUMBER"
